name: Deploy ASP.NET App

on:
  push:
    branches:
      - master
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create appsettings.Staging.json
      if: github.ref == 'refs/heads/develop'
      run: echo "${{ secrets.APPSETTINGS_STAGING }}" > appsettings.Staging.json

    - name: Create appsettings.Production.json
      if: github.ref == 'refs/heads/master'
      run: echo "${{ secrets.APPSETTINGS_PRODUCTION }}" > appsettings.Production.json

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: false
        tags: my-app:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Deploy to VPS
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOST: $ {{ secrets.SSH_HOST }}
        USER: $ {{ secrets.SSH_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          ENV="STAGING"
          PORT="9901"
        else
          ENV="PRODUCTION"
          PORT="9900"
        fi
        scp -i private_key.pem -o StrictHostKeyChecking=no Dockerfile $USER@$HOST:/github-builds/otr/$ENV/
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "
          cd /github-builds/otr/$ENV
          docker build -t my-app:${{ github.sha }} .
          docker run -d -p $PORT:80 --name my-app-${ENV} my-app:${{ github.sha }}
        "
        rm -f private_key.pem

