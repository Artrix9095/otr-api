name: Deploy ASP.NET App

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '7.0.400'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Run Tests
      run: dotnet test APITests --no-build --verbosity normal

    - name: Create appsettings.Staging.json
      if: github.ref == 'refs/heads/develop'
      run: |
        cat <<EOL > appsettings.Staging.json
        ${{ secrets.APPSETTINGS_STAGING }}
        EOL

    - name: Create appsettings.Production.json
      if: github.ref == 'refs/heads/master'
      run: |
        cat <<EOL > appsettings.Production.json
        ${{ secrets.APPSETTINGS_PRODUCTION }}
        EOL

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./API
        push: false
        tags: otr-api-${ENV}:${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Deploy to VPS
      env:
        PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.SSH_HOST }}
        USER: ${{ secrets.SSH_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          ENV="STAGING"
          PORT="9901"
        else
          ENV="PRODUCTION"
          PORT="9900"
        fi
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "
        if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          ENV='STAGING'
          PORT='9901'
        else
          ENV='PRODUCTION'
          PORT='9900'
        fi
        echo "Environment: $ENV"
        cd /github-builds/otr/$ENV
        docker build -t otr-api-$ENV:${{ github.sha }} .
        docker run -d -p $PORT:80 --name otr-api-$ENV otr-api-$ENV:${{ github.sha }}
        "

        scp -i private_key.pem -o StrictHostKeyChecking=no ./API/Dockerfile $USER@$HOST:/github-builds/otr/$ENV/
        ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST "
          cd /github-builds/otr/$ENV
          # Stop and remove the existing container if it's running
          docker stop otr-api-${ENV} || true
          docker rm otr-api-${ENV} || true
          # Build the new image
          docker build -t otr-api-${ENV}:${{ github.sha }} .
          # Run the new container with the updated image
          docker run -d -p $PORT:80 --name otr-api-${ENV} otr-api-${ENV}:${{ github.sha }}
        "
        rm -f private_key.pem
